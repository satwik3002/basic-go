//Write an API in golang to expose a dataset file. Dataset file shall be in csv format
o	GET Method to get the records in dataset
o	GET with filter on query params on dataset columns
o	POST method to create new records dataset with required column values
o	PUT method to update existing records in dataset with any column values
o	DELETE method to delete any existing record/records in the dataset.
package main

import (
	"encoding/csv"
	"encoding/json"
	"io/ioutil"
	"net/http"
	"os"
	"strconv"
	"strings"
)

type Record struct {
	ID      int    `json:"id"`
	Name    string `json:"name"`
	Age     int    `json:"age"`
	Address string `json:"address"`
}

var datasetFile = "dataset.csv"

func main() {
	http.HandleFunc("/records", getRecords)
	http.HandleFunc("/records/filter", getFilteredRecords)
	http.HandleFunc("/records/create", createRecord)
	http.HandleFunc("/records/update", updateRecord)
	http.HandleFunc("/records/delete", deleteRecord)
	http.ListenAndServe(":8080", nil)
}

// GET /records
func getRecords(w http.ResponseWriter, r *http.Request) {
	records, err := readDataset()
	if err != nil {
		w.WriteHeader(http.StatusInternalServerError)
		return
	}
	json.NewEncoder(w).Encode(records)
}

// GET /records/filter?name=value&age=value&address=value
func getFilteredRecords(w http.ResponseWriter, r *http.Request) {
	queryParams := r.URL.Query()
	records, err := readDataset()
	if err != nil {
		w.WriteHeader(http.StatusInternalServerError)
		return
	}
	filteredRecords := make([]Record, 0)
	for _, record := range records {
		if queryParams.Get("name") != "" && !strings.EqualFold(queryParams.Get("name"), record.Name) {
			continue
		}
		if queryParams.Get("age") != "" {
			age, err := strconv.Atoi(queryParams.Get("age"))
			if err != nil || age != record.Age {
				continue
			}
		}
		if queryParams.Get("address") != "" && !strings.EqualFold(queryParams.Get("address"), record.Address) {
			continue
		}
		filteredRecords = append(filteredRecords, record)
	}
	json.NewEncoder(w).Encode(filteredRecords)
}

// POST /records/create
func createRecord(w http.ResponseWriter, r *http.Request) {
	body, err := ioutil.ReadAll(r.Body)
	if err != nil {
		w.WriteHeader(http.StatusBadRequest)
		return
	}
	var record Record
	err = json.Unmarshal(body, &record)
	if err != nil {
		w.WriteHeader(http.StatusBadRequest)
		return
	}
	records, err := readDataset()
	if err != nil {
		w.WriteHeader(http.StatusInternalServerError)
		return
	}
	lastID := 0
	if len(records) > 0 {
		lastID = records[len(records)-1].ID
	}
	record.ID = lastID + 1
	records = append(records, record)
	err = writeDataset(records)
	if err != nil {
		w.WriteHeader(http.StatusInternalServerError)
		return
	}
	w.WriteHeader(http.StatusCreated)
}

// PUT /records/update?id=value
func updateRecord(w http.ResponseWriter, r *http.Request) {
	id, err := strconv.Atoi(r.URL.Query().Get("id"))
	if err != nil {
		w.WriteHeader(http.StatusBadRequest)
		return
	}
	body, err := ioutil.ReadAll(r.Body)
	if err != nil {
		w.WriteHeader(http.StatusBadRequest)
		return
	}
	var record Record
	err = json.Unmarshal(body, &record)
	if err != nil {
		w.WriteHeader(http.StatusBadRequest)
		return
	}
	records, err := readDataset()
	if err != nil {
		w.WriteHeader(http.StatusInternalServerError)
		return
	}
	recordFound := false
	for i, r := range records {
		if r.ID == id {
			records[i] = record
			recordFound = true
			break
		}
	}
	if !
